{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { //     // for query\n//     MARKER_QUERY,\n//     PLAN_QUERY,\nUSERNAME_QUERY, USERPLAN_QUERY, PLAN_SUBSCRIPTION // SIGNIN_QUERY,\n//     // for mutation\n//     ADD_MARKER_MUTATION,\n//     DELETE_MARKER_MUTATION,\n//     UPDATE_MARKER_MUTATION,\n//     NEW_PLAN_MUTATION,\n//     RENAME_PLAN_MUTATION,\n//     DELETE_PLAN_MUTATION,\n//     NEW_SPOT_MUTATION,\n//     delete_Spot_MUTATION,\n//     UPDATE_SPOTSTARTTIME_MUTATION,\n//     UPDATE_SPOTENDTIME_MUTATION,\n// SIGNUP_MUTATION\n//     // for subscription\n} from '../graphql';\nexport default function usePlan(_userId) {\n  _s();\n\n  const {\n    data: planList,\n    error,\n    subscribeToMore\n  } = useQuery(USERPLAN_QUERY, {\n    variables: {\n      _userId: _userId\n    }\n  });\n  const {\n    data: usernameData\n  } = useQuery(USERNAME_QUERY, {\n    variables: {\n      _id: _userId\n    }\n  });\n  const username = usernameData ? usernameData.Username : \"\";\n  const plan = planList ? planList.UserPlan : [];\n  useEffect(() => {\n    subscribeToMore({\n      document: PLAN_SUBSCRIPTION,\n      variables: {\n        username: username\n      },\n      updateQuery: (prev, {\n        subscriptionData\n      }) => {\n        const newData = subscriptionData.data.subscribePlan;\n        var newArray;\n        const prev_item = prev ? prev.UserPlan : [];\n\n        switch (newData.mutation) {\n          case \"NEW\":\n            return {\n              UserPlan: [...prev_item, newData.data]\n            };\n            break;\n\n          case \"DELETE\":\n            newArray = prev.UserPlan.filter(e => e._id !== newData.data._id);\n            return {\n              UserPlan: newArray\n            };\n            break;\n\n          case \"UPDATE\":\n            newArray = prev.UserPlan.map(e => {\n              if (e.title !== newData.data.title) return e;\n              console.log(newData);\n              return newData.data;\n            });\n            return {\n              \"UserPlan\": newArray\n            };\n            break;\n\n          default:\n            console.log(`Warning: unknown mutation ${newData.mutation}`);\n            break;\n        }\n      }\n    });\n  }, [username, subscribeToMore]);\n  return {\n    plan,\n    error,\n    username\n  };\n}\n\n_s(usePlan, \"6Naneoyi0d2PVi7CSmtHWORwpTM=\", false, function () {\n  return [useQuery, useQuery];\n});","map":{"version":3,"sources":["C:/Users/HO_CHUN_WEI/Desktop/web/Jose-Antonio_LoverBus/src/components/usePlan.js"],"names":["React","useEffect","useRef","useState","useQuery","useMutation","USERNAME_QUERY","USERPLAN_QUERY","PLAN_SUBSCRIPTION","usePlan","_userId","data","planList","error","subscribeToMore","variables","usernameData","_id","username","Username","plan","UserPlan","document","updateQuery","prev","subscriptionData","newData","subscribePlan","newArray","prev_item","mutation","filter","e","map","title","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,qBAAtC;AAEA,SACA;AACA;AACA;AACIC,cAJJ,EAKIC,cALJ,EAMIC,iBANJ,CAOI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AApBA,OAqBS,YArBT;AAuBA,eAAe,SAASC,OAAT,CAAiBC,OAAjB,EAAyB;AAAA;;AACpC,QAAM;AAACC,IAAAA,IAAI,EAACC,QAAN;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB,MAA0CV,QAAQ,CAACG,cAAD,EAAiB;AAACQ,IAAAA,SAAS,EAAC;AAACL,MAAAA,OAAO,EAACA;AAAT;AAAX,GAAjB,CAAxD;AACA,QAAM;AAACC,IAAAA,IAAI,EAACK;AAAN,MAAsBZ,QAAQ,CAACE,cAAD,EAAiB;AAACS,IAAAA,SAAS,EAAC;AAACE,MAAAA,GAAG,EAACP;AAAL;AAAX,GAAjB,CAApC;AACA,QAAMQ,QAAQ,GAAGF,YAAY,GAAEA,YAAY,CAACG,QAAf,GAA0B,EAAvD;AACA,QAAMC,IAAI,GAAGR,QAAQ,GAAEA,QAAQ,CAACS,QAAX,GAAsB,EAA3C;AACApB,EAAAA,SAAS,CAAC,MAAI;AACVa,IAAAA,eAAe,CAAC;AACZQ,MAAAA,QAAQ,EAAEd,iBADE;AAEZO,MAAAA,SAAS,EAAE;AAACG,QAAAA,QAAQ,EAAEA;AAAX,OAFC;AAGZK,MAAAA,WAAW,EAAE,CAACC,IAAD,EAAO;AAAEC,QAAAA;AAAF,OAAP,KAAgC;AACzC,cAAMC,OAAO,GAAGD,gBAAgB,CAACd,IAAjB,CAAsBgB,aAAtC;AACA,YAAIC,QAAJ;AACA,cAAMC,SAAS,GAAGL,IAAI,GAAGA,IAAI,CAACH,QAAR,GAAmB,EAAzC;;AACA,gBAAOK,OAAO,CAACI,QAAf;AACI,eAAK,KAAL;AACI,mBAAO;AAACT,cAAAA,QAAQ,EAAC,CAAC,GAAGQ,SAAJ,EAAeH,OAAO,CAACf,IAAvB;AAAV,aAAP;AACJ;;AACA,eAAK,QAAL;AACIiB,YAAAA,QAAQ,GAAGJ,IAAI,CAACH,QAAL,CAAcU,MAAd,CAAqBC,CAAC,IAAEA,CAAC,CAACf,GAAF,KAAUS,OAAO,CAACf,IAAR,CAAaM,GAA/C,CAAX;AACA,mBAAO;AAACI,cAAAA,QAAQ,EAACO;AAAV,aAAP;AACJ;;AACA,eAAK,QAAL;AACIA,YAAAA,QAAQ,GAAGJ,IAAI,CAACH,QAAL,CAAcY,GAAd,CAAkBD,CAAC,IAAE;AAC5B,kBAAGA,CAAC,CAACE,KAAF,KAAYR,OAAO,CAACf,IAAR,CAAauB,KAA5B,EACI,OAAOF,CAAP;AACJG,cAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACA,qBAAOA,OAAO,CAACf,IAAf;AACH,aALU,CAAX;AAMA,mBAAO;AAAC,0BAAWiB;AAAZ,aAAP;AACJ;;AACA;AACIO,YAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BV,OAAO,CAACI,QAAS,EAA1D;AACJ;AAnBJ;AAqBH;AA5BW,KAAD,CAAf;AA8BH,GA/BQ,EA+BN,CAACZ,QAAD,EAAWJ,eAAX,CA/BM,CAAT;AAgCA,SAAO;AAACM,IAAAA,IAAD;AAAOP,IAAAA,KAAP;AAAcK,IAAAA;AAAd,GAAP;AACH;;GAtCuBT,O;UAC4BL,Q,EACpBA,Q","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useQuery, useMutation } from '@apollo/react-hooks'\r\n\r\nimport {\r\n//     // for query\r\n//     MARKER_QUERY,\r\n//     PLAN_QUERY,\r\n    USERNAME_QUERY,\r\n    USERPLAN_QUERY,\r\n    PLAN_SUBSCRIPTION\r\n    // SIGNIN_QUERY,\r\n//     // for mutation\r\n//     ADD_MARKER_MUTATION,\r\n//     DELETE_MARKER_MUTATION,\r\n//     UPDATE_MARKER_MUTATION,\r\n//     NEW_PLAN_MUTATION,\r\n//     RENAME_PLAN_MUTATION,\r\n//     DELETE_PLAN_MUTATION,\r\n//     NEW_SPOT_MUTATION,\r\n//     delete_Spot_MUTATION,\r\n//     UPDATE_SPOTSTARTTIME_MUTATION,\r\n//     UPDATE_SPOTENDTIME_MUTATION,\r\n    // SIGNUP_MUTATION\r\n//     // for subscription\r\n  } from '../graphql'\r\n\r\nexport default function usePlan(_userId){\r\n    const {data:planList, error, subscribeToMore} = useQuery(USERPLAN_QUERY, {variables:{_userId:_userId}})\r\n    const {data:usernameData} = useQuery(USERNAME_QUERY, {variables:{_id:_userId}})\r\n    const username = usernameData? usernameData.Username : \"\"\r\n    const plan = planList? planList.UserPlan : []\r\n    useEffect(()=>{\r\n        subscribeToMore({\r\n            document: PLAN_SUBSCRIPTION,\r\n            variables: {username: username},\r\n            updateQuery: (prev, { subscriptionData }) => {\r\n                const newData = subscriptionData.data.subscribePlan\r\n                var newArray\r\n                const prev_item = prev ? prev.UserPlan : []\r\n                switch(newData.mutation){\r\n                    case \"NEW\":\r\n                        return {UserPlan:[...prev_item, newData.data]}\r\n                    break\r\n                    case \"DELETE\":\r\n                        newArray = prev.UserPlan.filter(e=>e._id !== newData.data._id)\r\n                        return {UserPlan:newArray}\r\n                    break\r\n                    case \"UPDATE\":\r\n                        newArray = prev.UserPlan.map(e=>{\r\n                            if(e.title !== newData.data.title)\r\n                                return e\r\n                            console.log(newData)\r\n                            return newData.data\r\n                        })\r\n                        return {\"UserPlan\":newArray}\r\n                    break\r\n                    default:\r\n                        console.log(`Warning: unknown mutation ${newData.mutation}`)\r\n                    break\r\n                }\r\n            }\r\n        })\r\n    }, [username, subscribeToMore])\r\n    return {plan, error, username}\r\n}"]},"metadata":{},"sourceType":"module"}