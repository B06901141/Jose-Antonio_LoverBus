{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HO_CHUN_WEI\\\\Desktop\\\\web\\\\Jose-Antonio_LoverBus\\\\src\\\\components\\\\AddPlace.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport 'antd/dist/antd.css';\nimport { Input, Layout, Menu, Breadcrumb, Button, Card, Select } from 'antd';\nimport { TagOutlined, CheckOutlined } from '@ant-design/icons';\nimport SweetAlert from \"react-bootstrap-sweetalert\";\nimport usePlan from '../components/usePlan';\nimport mapboxgl from \"mapbox-gl\";\nimport { // for query\n// MARKER_QUERY,\n// for mutation\nADD_MARKER_MUTATION, DELETE_MARKER_MUTATION, UPDATE_MARKER_MUTATION, NEWSPOT_MUTATION, NEWPLAN_MUTATION // for subscription\n} from '../graphql';\nconst {\n  Header,\n  Content,\n  Footer,\n  Sider\n} = Layout;\n\nconst AddPlace = ({\n  username,\n  currentMarker,\n  setCurrentMarker,\n  markerContentCallback,\n  insertionMode,\n  plan,\n  title,\n  setTitle,\n  description,\n  setDescription\n}) => {\n  _s();\n\n  const setCurrentMarkerContent = e => {\n    markerContentCallback(e);\n  };\n\n  const [planId, setPlanId] = useState(\"\");\n  const [list1Value, setList1Value] = useState(\"\");\n  const [showList1, setshowList1] = useState(false);\n  const [addSpot] = useMutation(NEWSPOT_MUTATION);\n  const [deleteMarker] = useMutation(DELETE_MARKER_MUTATION);\n  const [updateMarker] = useMutation(UPDATE_MARKER_MUTATION);\n  const [addMarker] = useMutation(ADD_MARKER_MUTATION);\n\n  const deleteOnclick = () => {\n    const marker_id = currentMarker._id;\n    deleteMarker({\n      variables: {\n        _id: marker_id\n      }\n    });\n    currentMarker.remove();\n    setCurrentMarker(null);\n  };\n\n  const onclick = async () => {\n    if (!currentMarker) {\n      alert(\"select a marker to add\");\n      return;\n    }\n\n    if (title === \"\") {\n      // alert(\"Please input a title\")\n      // return\n      setTitle(\"Untitled\");\n    }\n\n    if (description === \"\") {\n      setDescription(\"No description\");\n    }\n\n    const CustomTitle = title === \"\" ? \"Untitled\" : title;\n    const CustomDescription = description === \"\" ? \"No description\" : description;\n    const {\n      lng,\n      lat\n    } = currentMarker._lngLat;\n    var marker_id = currentMarker._id;\n\n    if (currentMarker.geocoderResult) {\n      marker_id = await addMarker({\n        variables: {\n          username: username,\n          title: CustomTitle,\n          coordinates: [currentMarker._lngLat.lng, currentMarker._lngLat.lat],\n          description: CustomDescription\n        }\n      });\n      currentMarker.geocoderResult = null;\n      marker_id = marker_id.data.addMarker;\n    } else if (insertionMode) {\n      marker_id = await addMarker({\n        variables: {\n          username: username,\n          title: CustomTitle,\n          coordinates: [lng, lat],\n          description: CustomDescription\n        }\n      });\n      marker_id = marker_id.data.addMarker;\n    } else {\n      updateMarker({\n        variables: {\n          _id: marker_id,\n          newTitle: CustomTitle,\n          newDescription: CustomDescription\n        }\n      });\n      if (currentMarker.getPopup()) currentMarker.getPopup().setHTML(`<h3>${CustomTitle}<h3><p>${CustomDescription}</p>`);else {\n        var popup = new mapboxgl.Popup().setHTML(`<h3>${CustomTitle}<h3><p>${CustomDescription}</p>`);\n        currentMarker.setPopup(popup);\n      }\n    }\n\n    if (marker_id !== \"\" && planId !== \"\") {\n      addSpot({\n        variables: {\n          planID: planId,\n          markerID: marker_id\n        }\n      });\n    }\n  };\n\n  const {\n    TextArea\n  } = Input;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    title: \"Add New Marker\",\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      type: \"inner\",\n      title: \"Title\",\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        placeholder: \"set your plan title\",\n        allowClear: true,\n        onChange: e => {\n          setTitle(e.target.value);\n        },\n        value: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        marginTop: 16\n      },\n      type: \"inner\",\n      title: \"Descriptions\",\n      children: /*#__PURE__*/_jsxDEV(TextArea, {\n        TextArea: true,\n        rows: 4,\n        placeholder: \"set your plan descriptions\",\n        allowClear: true,\n        value: description,\n        onChange: e => {\n          setDescription(e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        marginTop: 16\n      },\n      type: \"inner\",\n      title: \"My Plan List\",\n      children: /*#__PURE__*/_jsxDEV(AddtoPlan, {\n        plan: plan,\n        list1Value: list1Value,\n        setList1Value: setList1Value,\n        showList1: showList1,\n        setshowList1: setshowList1,\n        username: username,\n        planId: planId,\n        setPlanId: setPlanId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), insertionMode || !currentMarker ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        onClick: deleteOnclick,\n        style: {\n          position: \"absolute\",\n          right: \"90px\",\n          bottom: \"10px\"\n        },\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        size: \"small\",\n        onClick: onclick,\n        style: {\n          position: \"absolute\",\n          right: \"25px\",\n          bottom: \"10px\"\n        },\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddPlace, \"/xBctXuByLZnCJbEZ0qLv0SERGw=\", false, function () {\n  return [useMutation, useMutation, useMutation, useMutation];\n});\n\n_c = AddPlace;\nconst NEW_ITEM = \"NEW_ITEM\";\nconst Option = Select.Option;\n\nconst AddtoPlan = ({\n  username,\n  plan,\n  list1Value,\n  setList1Value,\n  showList1,\n  setshowList1,\n  planId,\n  setPlanId\n}) => {\n  _s2();\n\n  const list1Options = plan.map(e => e.title);\n  const [newPlan] = useMutation(NEWPLAN_MUTATION);\n\n  const setDisplayValue = v => {\n    setList1Value(v);\n\n    const _id = plan.filter(e => e.title === v)[0]._id;\n\n    setPlanId(_id);\n  };\n\n  const onChangeList1 = value => {\n    if (value !== NEW_ITEM) {\n      setDisplayValue(value);\n    } else {\n      setshowList1(true);\n    }\n  };\n\n  const onConfirm = async inputValue => {\n    inputValue = inputValue.trim();\n\n    if (list1Options.includes(inputValue)) {\n      setshowList1(false);\n      setDisplayValue(inputValue);\n    } else {\n      setshowList1(false);\n\n      const _id = await newPlan({\n        variables: {\n          username: username,\n          title: inputValue\n        }\n      });\n\n      setPlanId(_id.data.newPlan);\n      setList1Value(inputValue);\n    }\n  };\n\n  const list1SelectOptions = list1Options.map(o => /*#__PURE__*/_jsxDEV(Option, {\n    children: o\n  }, o, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      value: list1Value,\n      style: {\n        width: 100\n      },\n      onChange: onChangeList1,\n      children: [list1SelectOptions, /*#__PURE__*/_jsxDEV(Option, {\n        value: NEW_ITEM,\n        children: \"+ New Plan\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SweetAlert, {\n      show: showList1,\n      title: \"Add New Plan\",\n      text: \"Enter new Plan Name\",\n      showCancelButton: true,\n      type: \"input\",\n      inputPlaceholder: \"Enter Plan Name\",\n      animation: \"slide-from-top\",\n      validationMsg: \"Please enter a name!\",\n      onConfirm: onConfirm,\n      onCancel: () => {\n        setshowList1(false);\n      },\n      onEscapeKey: () => {\n        setshowList1(false);\n      },\n      onOutsideClick: () => {\n        setshowList1(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 7\n  }, this);\n};\n\n_s2(AddtoPlan, \"LoAnS45/TXWSyqqvrAqgnQtshhk=\", false, function () {\n  return [useMutation];\n});\n\n_c2 = AddtoPlan;\nexport default AddPlace;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AddPlace\");\n$RefreshReg$(_c2, \"AddtoPlan\");","map":{"version":3,"sources":["C:/Users/HO_CHUN_WEI/Desktop/web/Jose-Antonio_LoverBus/src/components/AddPlace.js"],"names":["React","useEffect","useRef","useState","useQuery","useMutation","Input","Layout","Menu","Breadcrumb","Button","Card","Select","TagOutlined","CheckOutlined","SweetAlert","usePlan","mapboxgl","ADD_MARKER_MUTATION","DELETE_MARKER_MUTATION","UPDATE_MARKER_MUTATION","NEWSPOT_MUTATION","NEWPLAN_MUTATION","Header","Content","Footer","Sider","AddPlace","username","currentMarker","setCurrentMarker","markerContentCallback","insertionMode","plan","title","setTitle","description","setDescription","setCurrentMarkerContent","e","planId","setPlanId","list1Value","setList1Value","showList1","setshowList1","addSpot","deleteMarker","updateMarker","addMarker","deleteOnclick","marker_id","_id","variables","remove","onclick","alert","CustomTitle","CustomDescription","lng","lat","_lngLat","geocoderResult","coordinates","data","newTitle","newDescription","getPopup","setHTML","popup","Popup","setPopup","planID","markerID","TextArea","target","value","marginTop","position","right","bottom","NEW_ITEM","Option","AddtoPlan","list1Options","map","newPlan","setDisplayValue","v","filter","onChangeList1","onConfirm","inputValue","trim","includes","list1SelectOptions","o","width"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { useQuery, useMutation } from '@apollo/react-hooks'\r\nimport 'antd/dist/antd.css'\r\nimport { Input, Layout, Menu, Breadcrumb, Button, Card, Select } from 'antd';\r\nimport { TagOutlined, CheckOutlined} from '@ant-design/icons';\r\nimport SweetAlert from \"react-bootstrap-sweetalert\";\r\nimport usePlan from '../components/usePlan'\r\nimport mapboxgl from \"mapbox-gl\";\r\n\r\nimport {\r\n// for query\r\n// MARKER_QUERY,\r\n// for mutation\r\nADD_MARKER_MUTATION,\r\nDELETE_MARKER_MUTATION,\r\nUPDATE_MARKER_MUTATION,\r\nNEWSPOT_MUTATION,\r\nNEWPLAN_MUTATION,\r\n// for subscription\r\n} from '../graphql'\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\n\r\nconst AddPlace = ({username, currentMarker, setCurrentMarker, markerContentCallback, insertionMode, plan, title, setTitle, description, setDescription}) => {\r\n  const setCurrentMarkerContent = e => { markerContentCallback(e);} \r\n  const [planId, setPlanId] = useState(\"\")\r\n  const [list1Value, setList1Value] = useState(\"\")\r\n  const [showList1, setshowList1] = useState(false)\r\n  const [addSpot] = useMutation(NEWSPOT_MUTATION)\r\n  const [deleteMarker] = useMutation(DELETE_MARKER_MUTATION)\r\n  const [updateMarker] = useMutation(UPDATE_MARKER_MUTATION)\r\n  const [addMarker] = useMutation(ADD_MARKER_MUTATION)\r\n  const deleteOnclick = () => {\r\n    const marker_id = currentMarker._id\r\n    deleteMarker({variables:{_id:marker_id}})\r\n    currentMarker.remove()\r\n    setCurrentMarker(null)\r\n  }\r\n  const onclick = async () => {\r\n    if(!currentMarker) {\r\n      alert(\"select a marker to add\")\r\n      return\r\n    }\r\n    if(title === \"\"){\r\n      // alert(\"Please input a title\")\r\n      // return\r\n      setTitle(\"Untitled\")\r\n    }\r\n    if(description === \"\"){\r\n      setDescription(\"No description\")\r\n    }\r\n    const CustomTitle = title === \"\" ? \"Untitled\" : title\r\n    const CustomDescription = description === \"\" ? \"No description\" : description\r\n    const {lng, lat} = currentMarker._lngLat\r\n    var marker_id = currentMarker._id\r\n    if(currentMarker.geocoderResult){\r\n      marker_id = await addMarker({variables:{\r\n        username: username,\r\n        title: CustomTitle,\r\n        coordinates: [currentMarker._lngLat.lng, currentMarker._lngLat.lat],\r\n        description: CustomDescription\r\n      }})\r\n      currentMarker.geocoderResult = null\r\n      marker_id = marker_id.data.addMarker\r\n    }\r\n    else if(insertionMode){\r\n      marker_id = await addMarker({variables:{\r\n        username: username,\r\n        title: CustomTitle,\r\n        coordinates: [lng, lat],\r\n        description: CustomDescription\r\n      }})\r\n      marker_id = marker_id.data.addMarker\r\n    }\r\n    else{\r\n      updateMarker({variables:{\r\n        _id:marker_id,\r\n        newTitle: CustomTitle,\r\n        newDescription: CustomDescription\r\n      }})\r\n      if(currentMarker.getPopup())\r\n        currentMarker.getPopup().setHTML(`<h3>${CustomTitle}<h3><p>${CustomDescription}</p>`);\r\n      else{\r\n        var popup = new mapboxgl.Popup()\r\n            .setHTML(`<h3>${CustomTitle}<h3><p>${CustomDescription}</p>`);\r\n        currentMarker.setPopup(popup)\r\n      }\r\n    }\r\n    if(marker_id !== \"\" && planId !== \"\"){\r\n      addSpot({variables:{\r\n        planID: planId,\r\n        markerID: marker_id\r\n      }})\r\n    }\r\n  }\r\n  const { TextArea } = Input;\r\n  return (\r\n    <Card title=\"Add New Marker\">\r\n      <Card type=\"inner\" title=\"Title\">\r\n        <Input placeholder=\"set your plan title\" allowClear\r\n              onChange={(e) => {setTitle(e.target.value)}}\r\n              value={title} ></Input>\r\n      </Card>\r\n      <Card\r\n        style={{ marginTop: 16 }}\r\n        type=\"inner\"\r\n        title=\"Descriptions\"\r\n      >\r\n        <TextArea TextArea rows={4} placeholder=\"set your plan descriptions\" allowClear\r\n                  value={description}\r\n                  onChange={(e) => {setDescription(e.target.value)}}></TextArea> \r\n      </Card>\r\n      <Card  \r\n        style={{ marginTop: 16 }}\r\n        type=\"inner\"\r\n        title=\"My Plan List\">\r\n        <AddtoPlan plan={plan} list1Value={list1Value} setList1Value={setList1Value}\r\n                showList1={showList1} setshowList1={setshowList1} username={username}\r\n                planId={planId} setPlanId={setPlanId}></AddtoPlan>\r\n      </Card>\r\n      <br></br>\r\n      {insertionMode || !currentMarker ? null : (\r\n      <div>\r\n        <Button size={\"small\"} onClick={deleteOnclick} style={{position: \"absolute\", right: \"90px\", bottom: \"10px\"}}>Delete</Button>\r\n      </div>)}\r\n      <div>\r\n        <Button size={\"small\"} onClick={onclick} style={{position: \"absolute\", right: \"25px\", bottom: \"10px\"}}>Save</Button>\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst NEW_ITEM = \"NEW_ITEM\";\r\nconst Option = Select.Option;\r\n\r\nconst AddtoPlan = ({username, plan, list1Value, setList1Value, showList1, setshowList1, planId, setPlanId}) => {\r\n  const list1Options = plan.map(e=>e.title)\r\n  const [newPlan] = useMutation(NEWPLAN_MUTATION)\r\n  const setDisplayValue = (v) => {\r\n    setList1Value(v);\r\n    const _id = plan.filter(e=>e.title === v)[0]._id\r\n    setPlanId(_id)\r\n  }\r\n  const onChangeList1 = (value) => {\r\n    if (value !== NEW_ITEM) {\r\n      setDisplayValue(value)\r\n    } else {\r\n      setshowList1(true)\r\n    }\r\n  };\r\n\r\n  const onConfirm = async (inputValue) => {\r\n    inputValue = inputValue.trim();\r\n    if (list1Options.includes(inputValue)) {\r\n      setshowList1(false)\r\n      setDisplayValue(inputValue)\r\n    } else {\r\n      setshowList1(false)\r\n      const _id = await newPlan({variables:{username:username,title:inputValue}})\r\n      setPlanId(_id.data.newPlan)\r\n      setList1Value(inputValue)\r\n    }\r\n  };\r\n\r\n  const list1SelectOptions = list1Options.map(o => (\r\n    <Option key={o}>{o}</Option>\r\n  ));\r\n\r\n    return (\r\n      <div>\r\n        <Select\r\n          value={list1Value}\r\n          style={{ width: 100 }}\r\n          onChange={onChangeList1}\r\n        >\r\n          {list1SelectOptions}\r\n          <Option value={NEW_ITEM}>+ New Plan</Option>\r\n        </Select>\r\n\r\n        <SweetAlert\r\n          show={showList1}\r\n          title=\"Add New Plan\"\r\n          text=\"Enter new Plan Name\"\r\n          showCancelButton\r\n          type=\"input\"\r\n          inputPlaceholder=\"Enter Plan Name\"\r\n          animation=\"slide-from-top\"\r\n          validationMsg=\"Please enter a name!\"\r\n          onConfirm={onConfirm}\r\n          onCancel={() => {\r\n            setshowList1(false);\r\n          }}\r\n          onEscapeKey={() => {setshowList1(false)}}\r\n          onOutsideClick={() => {setshowList1(false)}}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default AddPlace\r\n"]},"metadata":{},"sourceType":"module"}