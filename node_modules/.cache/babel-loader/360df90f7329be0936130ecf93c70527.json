{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\HO_CHUN_WEI\\\\Desktop\\\\web\\\\Jose-Antonio_LoverBus\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TourMap from './containers/TourMap';\nimport TourPlan from './containers/TourPlan';\nimport Login from './containers/Login';\nimport { HashRouter, Route } from 'react-router-dom'; // import {\n//     BrowserRouter as Router,\n//     Switch,\n//     Route,\n//     Link\n// } from \"react-router-dom\";\n// import reportWebVitals from './reportWebVitals';\n\nimport { ApolloClient, InMemoryCache } from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { split } from 'apollo-link';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { getMainDefinition } from 'apollo-utilities'; // Create an http link:\n\nconst httpLink = new HttpLink({\n  uri: 'http://jose-antonio-lover-bus-server.herokuapp.com/'\n}); // Create a WebSocket link:\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://jose-antonio-lover-bus-server.herokuapp.com/`,\n  options: {\n    reconnect: true\n  }\n}); // using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\n\nconst link = split( // split based on operation type\n({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === 'OperationDefinition' && definition.operation === 'subscription';\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache().restore({})\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(HashRouter, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      component: Login\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/:userId\",\n      component: TourMap\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/:userId/TourPlan\",\n      component: TourPlan\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 56,\n  columnNumber: 5\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();","map":{"version":3,"sources":["C:/Users/HO_CHUN_WEI/Desktop/web/Jose-Antonio_LoverBus/src/index.js"],"names":["React","ReactDOM","TourMap","TourPlan","Login","HashRouter","Route","ApolloClient","InMemoryCache","ApolloProvider","split","HttpLink","WebSocketLink","getMainDefinition","httpLink","uri","wsLink","options","reconnect","link","query","definition","kind","operation","client","cache","restore","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,SAAQC,UAAR,EAAmBC,KAAnB,QAA+B,kBAA/B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;AAEA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,cAA5C;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,iBAAT,QAAkC,kBAAlC,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,IAAIH,QAAJ,CAAa;AAC1BI,EAAAA,GAAG,EAAE;AADqB,CAAb,CAAjB,C,CAIA;;AACA,MAAMC,MAAM,GAAG,IAAIJ,aAAJ,CAAkB;AAC7BG,EAAAA,GAAG,EAAG,mDADuB;AAE7BE,EAAAA,OAAO,EAAE;AAAEC,IAAAA,SAAS,EAAE;AAAb;AAFoB,CAAlB,CAAf,C,CAKA;AACA;;AACA,MAAMC,IAAI,GAAGT,KAAK,EAClB;AACA,CAAC;AAAEU,EAAAA;AAAF,CAAD,KAAe;AACX,QAAMC,UAAU,GAAGR,iBAAiB,CAACO,KAAD,CAApC;AACA,SACIC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF7B;AAE6C,CAN/B,EAOVP,MAPU,EAQVF,QARU,CAAlB;AAWA,MAAMU,MAAM,GAAG,IAAIjB,YAAJ,CAAiB;AAC5BY,EAAAA,IAD4B;AAE5BM,EAAAA,KAAK,EAAE,IAAIjB,aAAJ,GAAoBkB,OAApB,CAA4B,EAA5B;AAFqB,CAAjB,CAAf;AAKAzB,QAAQ,CAAC0B,MAAT,eACI,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEH,MAAxB;AAAA,yBACI,QAAC,UAAD;AAAA,4BACI,QAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAEpB;AAAjC;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,UAAlB;AAA6B,MAAA,SAAS,EAAEF;AAAxC;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,mBAAlB;AAAsC,MAAA,SAAS,EAAEC;AAAjD;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,QADJ,EAQIyB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CARJ,E,CAWA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport TourMap from './containers/TourMap';\r\nimport TourPlan from './containers/TourPlan';\r\nimport Login from './containers/Login'\r\n\r\nimport {HashRouter,Route} from 'react-router-dom';\r\n\r\n// import {\r\n//     BrowserRouter as Router,\r\n//     Switch,\r\n//     Route,\r\n//     Link\r\n// } from \"react-router-dom\";\r\n  \r\n\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nimport { ApolloClient, InMemoryCache } from 'apollo-boost'\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport { split } from 'apollo-link'\r\nimport { HttpLink } from 'apollo-link-http'\r\nimport { WebSocketLink } from 'apollo-link-ws'\r\nimport { getMainDefinition } from 'apollo-utilities'\r\n\r\n// Create an http link:\r\nconst httpLink = new HttpLink({\r\n    uri: 'http://jose-antonio-lover-bus-server.herokuapp.com/'\r\n})\r\n\r\n// Create a WebSocket link:\r\nconst wsLink = new WebSocketLink({\r\n    uri: `ws://jose-antonio-lover-bus-server.herokuapp.com/`,\r\n    options: { reconnect: true }\r\n})\r\n\r\n// using the ability to split links, you can send data to each link\r\n// depending on what kind of operation is being sent\r\nconst link = split(\r\n// split based on operation type\r\n({ query }) => {\r\n    const definition = getMainDefinition(query)\r\n    return (\r\n        definition.kind === 'OperationDefinition' &&\r\n        definition.operation === 'subscription')},\r\n        wsLink,\r\n        httpLink\r\n        )\r\n\r\nconst client = new ApolloClient({\r\n    link,\r\n    cache: new InMemoryCache().restore({})\r\n})\r\n\r\nReactDOM.render(\r\n    <ApolloProvider client={client}>\r\n        <HashRouter>\r\n            <Route exact path=\"/\" component={Login}/>\r\n            <Route exact path=\"/:userId\" component={TourMap} />\r\n            <Route exact path=\"/:userId/TourPlan\" component={TourPlan} />\r\n        </HashRouter>\r\n    </ApolloProvider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"]},"metadata":{},"sourceType":"module"}