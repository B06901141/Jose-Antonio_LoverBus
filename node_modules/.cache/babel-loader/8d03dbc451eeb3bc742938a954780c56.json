{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React from'react';import ReactDOM from'react-dom';import TourMap from'./containers/TourMap';import TourPlan from'./containers/TourPlan';import Login from'./containers/Login';import{HashRouter,Route}from'react-router-dom';// import {\n//     BrowserRouter as Router,\n//     Switch,\n//     Route,\n//     Link\n// } from \"react-router-dom\";\n// import reportWebVitals from './reportWebVitals';\nimport{ApolloClient,InMemoryCache}from'apollo-boost';import{ApolloProvider}from'react-apollo';import{split}from'apollo-link';import{HttpLink}from'apollo-link-http';import{WebSocketLink}from'apollo-link-ws';import{getMainDefinition}from'apollo-utilities';// Create an http link:\nvar httpLink=new HttpLink({uri:'http://localhost:4000/'});// Create a WebSocket link:\nvar wsLink=new WebSocketLink({uri:\"ws://localhost:4000/\",options:{reconnect:true}});// using the ability to split links, you can send data to each link\n// depending on what kind of operation is being sent\nvar link=split(// split based on operation type\nfunction(_ref){var query=_ref.query;var definition=getMainDefinition(query);return definition.kind==='OperationDefinition'&&definition.operation==='subscription';},wsLink,httpLink);var client=new ApolloClient({link:link,cache:new InMemoryCache().restore({})});ReactDOM.render(/*#__PURE__*/_jsx(ApolloProvider,{client:client,children:/*#__PURE__*/_jsxs(HashRouter,{children:[/*#__PURE__*/_jsx(Route,{exact:true,path:\"/\",component:Login}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/:userId\",component:TourMap}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/:userId/TourPlan\",component:TourPlan})]})}),document.getElementById('root'));// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();","map":{"version":3,"sources":["C:/Users/HO_CHUN_WEI/Desktop/web/Jose-Antonio_LoverBus/src/index.js"],"names":["React","ReactDOM","TourMap","TourPlan","Login","HashRouter","Route","ApolloClient","InMemoryCache","ApolloProvider","split","HttpLink","WebSocketLink","getMainDefinition","httpLink","uri","wsLink","options","reconnect","link","query","definition","kind","operation","client","cache","restore","render","document","getElementById"],"mappings":"wFAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CACA,MAAOC,CAAAA,QAAP,KAAqB,uBAArB,CACA,MAAOC,CAAAA,KAAP,KAAkB,oBAAlB,CAEA,OAAQC,UAAR,CAAmBC,KAAnB,KAA+B,kBAA/B,CAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA,OAASC,YAAT,CAAuBC,aAAvB,KAA4C,cAA5C,CACA,OAASC,cAAT,KAA+B,cAA/B,CACA,OAASC,KAAT,KAAsB,aAAtB,CACA,OAASC,QAAT,KAAyB,kBAAzB,CACA,OAASC,aAAT,KAA8B,gBAA9B,CACA,OAASC,iBAAT,KAAkC,kBAAlC,CAEA;AACA,GAAMC,CAAAA,QAAQ,CAAG,GAAIH,CAAAA,QAAJ,CAAa,CAC1BI,GAAG,CAAE,wBADqB,CAAb,CAAjB,CAIA;AACA,GAAMC,CAAAA,MAAM,CAAG,GAAIJ,CAAAA,aAAJ,CAAkB,CAC7BG,GAAG,uBAD0B,CAE7BE,OAAO,CAAE,CAAEC,SAAS,CAAE,IAAb,CAFoB,CAAlB,CAAf,CAKA;AACA;AACA,GAAMC,CAAAA,IAAI,CAAGT,KAAK,CAClB;AACA,cAAe,IAAZU,CAAAA,KAAY,MAAZA,KAAY,CACX,GAAMC,CAAAA,UAAU,CAAGR,iBAAiB,CAACO,KAAD,CAApC,CACA,MACIC,CAAAA,UAAU,CAACC,IAAX,GAAoB,qBAApB,EACAD,UAAU,CAACE,SAAX,GAAyB,cAF7B,CAE6C,CAN/B,CAOVP,MAPU,CAQVF,QARU,CAAlB,CAWA,GAAMU,CAAAA,MAAM,CAAG,GAAIjB,CAAAA,YAAJ,CAAiB,CAC5BY,IAAI,CAAJA,IAD4B,CAE5BM,KAAK,CAAE,GAAIjB,CAAAA,aAAJ,GAAoBkB,OAApB,CAA4B,EAA5B,CAFqB,CAAjB,CAAf,CAKAzB,QAAQ,CAAC0B,MAAT,cACI,KAAC,cAAD,EAAgB,MAAM,CAAEH,MAAxB,uBACI,MAAC,UAAD,yBACI,KAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,GAAlB,CAAsB,SAAS,CAAEpB,KAAjC,EADJ,cAEI,KAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,UAAlB,CAA6B,SAAS,CAAEF,OAAxC,EAFJ,cAGI,KAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,mBAAlB,CAAsC,SAAS,CAAEC,QAAjD,EAHJ,GADJ,EADJ,CAQIyB,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CARJ,EAWA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport TourMap from './containers/TourMap';\r\nimport TourPlan from './containers/TourPlan';\r\nimport Login from './containers/Login'\r\n\r\nimport {HashRouter,Route} from 'react-router-dom';\r\n\r\n// import {\r\n//     BrowserRouter as Router,\r\n//     Switch,\r\n//     Route,\r\n//     Link\r\n// } from \"react-router-dom\";\r\n  \r\n\r\n// import reportWebVitals from './reportWebVitals';\r\n\r\nimport { ApolloClient, InMemoryCache } from 'apollo-boost'\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport { split } from 'apollo-link'\r\nimport { HttpLink } from 'apollo-link-http'\r\nimport { WebSocketLink } from 'apollo-link-ws'\r\nimport { getMainDefinition } from 'apollo-utilities'\r\n\r\n// Create an http link:\r\nconst httpLink = new HttpLink({\r\n    uri: 'http://localhost:4000/'\r\n})\r\n\r\n// Create a WebSocket link:\r\nconst wsLink = new WebSocketLink({\r\n    uri: `ws://localhost:4000/`,\r\n    options: { reconnect: true }\r\n})\r\n\r\n// using the ability to split links, you can send data to each link\r\n// depending on what kind of operation is being sent\r\nconst link = split(\r\n// split based on operation type\r\n({ query }) => {\r\n    const definition = getMainDefinition(query)\r\n    return (\r\n        definition.kind === 'OperationDefinition' &&\r\n        definition.operation === 'subscription')},\r\n        wsLink,\r\n        httpLink\r\n        )\r\n\r\nconst client = new ApolloClient({\r\n    link,\r\n    cache: new InMemoryCache().restore({})\r\n})\r\n\r\nReactDOM.render(\r\n    <ApolloProvider client={client}>\r\n        <HashRouter>\r\n            <Route exact path=\"/\" component={Login}/>\r\n            <Route exact path=\"/:userId\" component={TourMap} />\r\n            <Route exact path=\"/:userId/TourPlan\" component={TourPlan} />\r\n        </HashRouter>\r\n    </ApolloProvider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"]},"metadata":{},"sourceType":"module"}